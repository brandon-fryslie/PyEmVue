from _typeshed import Incomplete

def cognito_to_dict(attr_list, attr_map: Incomplete | None = None): ...
def dict_to_cognito(attributes, attr_map: Incomplete | None = None): ...
def camel_to_snake(camel_str): ...
def snake_to_camel(snake_str): ...

class UserObj:
    username: Incomplete
    sub: Incomplete
    email_verified: Incomplete
    phone_number_verified: Incomplete
    def __init__(self, username, attribute_list, cognito_obj, metadata: Incomplete | None = None, attr_map: Incomplete | None = None) -> None: ...
    def __unicode__(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value) -> None: ...
    def save(self, admin: bool = False) -> None: ...
    def delete(self, admin: bool = False) -> None: ...

class GroupObj:
    group_name: Incomplete
    description: Incomplete
    creation_date: Incomplete
    last_modified_date: Incomplete
    role_arn: Incomplete
    precedence: Incomplete
    def __init__(self, group_data, cognito_obj) -> None: ...
    def __unicode__(self): ...

class Cognito:
    user_class = UserObj
    group_class = GroupObj
    user_pool_id: Incomplete
    client_id: Incomplete
    user_pool_region: Incomplete
    username: Incomplete
    id_token: Incomplete
    access_token: Incomplete
    refresh_token: Incomplete
    client_secret: Incomplete
    token_type: Incomplete
    id_claims: Incomplete
    access_claims: Incomplete
    custom_attributes: Incomplete
    base_attributes: Incomplete
    pool_jwk: Incomplete
    mfa_tokens: Incomplete
    pool_domain_url: Incomplete
    client: Incomplete
    def __init__(self, user_pool_id, client_id, user_pool_region: Incomplete | None = None, username: Incomplete | None = None, id_token: Incomplete | None = None, refresh_token: Incomplete | None = None, access_token: Incomplete | None = None, client_secret: Incomplete | None = None, access_key: Incomplete | None = None, secret_key: Incomplete | None = None, session: Incomplete | None = None, botocore_config: Incomplete | None = None, boto3_client_kwargs: Incomplete | None = None) -> None: ...
    @property
    def user_pool_url(self): ...
    def get_keys(self): ...
    def get_key(self, kid): ...
    def verify_tokens(self) -> None: ...
    def verify_token(self, token, id_name, token_use): ...
    def get_user_obj(self, username: Incomplete | None = None, attribute_list: Incomplete | None = None, metadata: Incomplete | None = None, attr_map: Incomplete | None = None): ...
    def get_group_obj(self, group_data): ...
    def switch_session(self, session) -> None: ...
    def check_token(self, renew: bool = True): ...
    def set_base_attributes(self, **kwargs) -> None: ...
    def add_custom_attributes(self, **kwargs) -> None: ...
    def register(self, username, password, attr_map: Incomplete | None = None, client_metadata: Incomplete | None = None): ...
    def admin_confirm_sign_up(self, username: Incomplete | None = None) -> None: ...
    def confirm_sign_up(self, confirmation_code, username: Incomplete | None = None) -> None: ...
    def resend_confirmation_code(self, username) -> None: ...
    def admin_authenticate(self, password) -> None: ...
    def authenticate(self, password, client_metadata: Incomplete | None = None) -> None: ...
    def new_password_challenge(self, password, new_password) -> None: ...
    def logout(self) -> None: ...
    def admin_update_profile(self, attrs, attr_map: Incomplete | None = None) -> None: ...
    def update_profile(self, attrs, attr_map: Incomplete | None = None) -> None: ...
    def get_user(self, attr_map: Incomplete | None = None): ...
    def get_users(self, attr_map: Incomplete | None = None): ...
    def admin_get_user(self, attr_map: Incomplete | None = None): ...
    def admin_create_user(self, username, temporary_password: str = '', additional_kwargs: Incomplete | None = None, attr_map: Incomplete | None = None, **kwargs): ...
    def send_verification(self, attribute: str = 'email') -> None: ...
    def validate_verification(self, confirmation_code, attribute: str = 'email'): ...
    def renew_access_token(self) -> None: ...
    def initiate_forgot_password(self) -> None: ...
    def delete_user(self) -> None: ...
    def admin_delete_user(self) -> None: ...
    def admin_reset_password(self, username, client_metadata: Incomplete | None = None) -> None: ...
    def confirm_forgot_password(self, confirmation_code, password) -> None: ...
    def change_password(self, previous_password, proposed_password) -> None: ...
    def get_group(self, group_name): ...
    def get_groups(self): ...
    def admin_add_user_to_group(self, username, group_name) -> None: ...
    def admin_remove_user_from_group(self, username, group_name) -> None: ...
    def admin_list_groups_for_user(self, username): ...
    def admin_enable_user(self, username) -> None: ...
    def admin_disable_user(self, username) -> None: ...
    def admin_create_identity_provider(self, pool_id, provider_name, provider_type, provider_details, **kwargs) -> None: ...
    def admin_describe_identity_provider(self, pool_id, provider_name): ...
    def admin_update_identity_provider(self, pool_id, provider_name, **kwargs) -> None: ...
    def describe_user_pool_client(self, pool_id: str, client_id: str): ...
    def admin_update_user_pool_client(self, pool_id: str, client_id: str, **kwargs): ...
    def associate_software_token(self): ...
    def verify_software_token(self, code, device_name: str = ''): ...
    def set_user_mfa_preference(self, sms_mfa, software_token_mfa, preferred: Incomplete | None = None) -> None: ...
    def respond_to_software_token_mfa_challenge(self, code, mfa_tokens: Incomplete | None = None) -> None: ...
    def respond_to_sms_mfa_challenge(self, code, mfa_tokens: Incomplete | None = None) -> None: ...
