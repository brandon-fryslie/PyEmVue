from typing import Optional, Dict, Any, List

def cognito_to_dict(attr_list: List[Dict[str, Any]], attr_map: Optional[Dict[str, str]] = None) -> Dict[str, Any]: ...
def dict_to_cognito(attributes: Dict[str, Any], attr_map: Optional[Dict[str, str]] = None) -> List[Dict[str, Any]]: ...
def camel_to_snake(camel_str: str) -> str: ...
def snake_to_camel(snake_str: str) -> str: ...

class UserObj:
    username: str
    sub: str
    email_verified: bool
    phone_number_verified: bool
    def __init__(self, username: str, attribute_list: List[Dict[str, Any]], cognito_obj: 'Cognito', metadata: Optional[Dict[str, Any]] = None, attr_map: Optional[Dict[str, str]] = None) -> None: ...
    def __unicode__(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value) -> None: ...
    def save(self, admin: bool = False) -> None: ...
    def delete(self, admin: bool = False) -> None: ...

class GroupObj:
    group_name: str
    description: str
    creation_date: str
    last_modified_date: str
    role_arn: str
    precedence: int
    def __init__(self, group_data, cognito_obj) -> None: ...
    def __unicode__(self): ...

class Cognito:
    user_class = UserObj
    group_class = GroupObj
    user_pool_id: str
    client_id: str
    user_pool_region: Optional[str]
    username: Optional[str]
    id_token: str
    access_token: str
    refresh_token: str
    client_secret: Optional[str]
    token_type: str
    id_claims: Dict[str, Any]
    access_claims: Dict[str, Any]
    custom_attributes: Dict[str, Any]
    base_attributes: Dict[str, Any]
    pool_jwk: Dict[str, Any]
    mfa_tokens: Dict[str, Any]
    pool_domain_url: str
    client: Any
    def __init__(self, user_pool_id: str, client_id: str, user_pool_region: Optional[str] = None, username: Optional[str] = None, id_token: Optional[str] = None, refresh_token: Optional[str] = None, access_token: Optional[str] = None, client_secret: Optional[str] = None, access_key: Optional[str] = None, secret_key: Optional[str] = None, session: Optional[Any] = None, botocore_config: Optional[Any] = None, boto3_client_kwargs: Optional[Dict[str, Any]] = None) -> None: ...
    @property
    def user_pool_url(self): ...
    def get_keys(self): ...
    def get_key(self, kid): ...
    def verify_tokens(self) -> None: ...
    def verify_token(self, token, id_name, token_use): ...
    from typing import Union

    def get_user_obj(self, username: Optional[str] = None, attribute_list: Optional[List[Dict[str, Any]]] = None, metadata: Optional[Dict[str, Any]] = None, attr_map: Optional[Dict[str, str]] = None) -> UserObj: ...
    def get_group_obj(self, group_data: Dict[str, Any]) -> GroupObj: ...
    def switch_session(self, session: Any) -> None: ...
    def check_token(self, renew: bool = True) -> None: ...
    def set_base_attributes(self, **kwargs: Any) -> None: ...
    def add_custom_attributes(self, **kwargs: Any) -> None: ...
    def register(self, username: str, password: str, attr_map: Optional[Dict[str, str]] = None, client_metadata: Optional[Dict[str, Any]] = None) -> None: ...
    def admin_confirm_sign_up(self, username: Optional[str] = None) -> None: ...
    def confirm_sign_up(self, confirmation_code: str, username: Optional[str] = None) -> None: ...
    def resend_confirmation_code(self, username: str) -> None: ...
    def admin_authenticate(self, password: str) -> None: ...
    def authenticate(self, password: str, client_metadata: Optional[Dict[str, Any]] = None) -> None: ...
    def new_password_challenge(self, password: str, new_password: str) -> None: ...
    def logout(self) -> None: ...
    def admin_update_profile(self, attrs: Dict[str, Any], attr_map: Optional[Dict[str, str]] = None) -> None: ...
    def update_profile(self, attrs: Dict[str, Any], attr_map: Optional[Dict[str, str]] = None) -> None: ...
    def get_user(self, attr_map: Optional[Dict[str, str]] = None) -> UserObj: ...
    def get_users(self, attr_map: Optional[Dict[str, str]] = None) -> List[UserObj]: ...
    def admin_get_user(self, attr_map: Optional[Dict[str, str]] = None) -> UserObj: ...
    def admin_create_user(self, username: str, temporary_password: str = '', additional_kwargs: Optional[Dict[str, Any]] = None, attr_map: Optional[Dict[str, str]] = None, **kwargs: Any) -> None: ...
    def send_verification(self, attribute: str = 'email') -> None: ...
    def validate_verification(self, confirmation_code: str, attribute: str = 'email') -> None: ...
    def renew_access_token(self) -> None: ...
    def initiate_forgot_password(self) -> None: ...
    def delete_user(self) -> None: ...
    def admin_delete_user(self) -> None: ...
    def admin_reset_password(self, username: str, client_metadata: Optional[Dict[str, Any]] = None) -> None: ...
    def confirm_forgot_password(self, confirmation_code: str, password: str) -> None: ...
    def change_password(self, previous_password: str, proposed_password: str) -> None: ...
    def get_group(self, group_name: str) -> GroupObj: ...
    def get_groups(self) -> List[GroupObj]: ...
    def admin_add_user_to_group(self, username: str, group_name: str) -> None: ...
    def admin_remove_user_from_group(self, username: str, group_name: str) -> None: ...
    def admin_list_groups_for_user(self, username: str) -> List[GroupObj]: ...
    def admin_enable_user(self, username: str) -> None: ...
    def admin_disable_user(self, username: str) -> None: ...
    def admin_create_identity_provider(self, pool_id: str, provider_name: str, provider_type: str, provider_details: Dict[str, Any], **kwargs: Any) -> None: ...
    def admin_describe_identity_provider(self, pool_id: str, provider_name: str) -> Dict[str, Any]: ...
    def admin_update_identity_provider(self, pool_id: str, provider_name: str, **kwargs: Any) -> None: ...
    def describe_user_pool_client(self, pool_id: str, client_id: str) -> Dict[str, Any]: ...
    def admin_update_user_pool_client(self, pool_id: str, client_id: str, **kwargs: Any) -> None: ...
    def associate_software_token(self) -> Dict[str, Any]: ...
    def verify_software_token(self, code: str, device_name: str = '') -> Dict[str, Any]: ...
    def set_user_mfa_preference(self, sms_mfa: Dict[str, Any], software_token_mfa: Dict[str, Any], preferred: Optional[Dict[str, Any]] = None) -> None: ...
    def respond_to_software_token_mfa_challenge(self, code: str, mfa_tokens: Optional[Dict[str, Any]] = None) -> None: ...
    def respond_to_sms_mfa_challenge(self, code: str, mfa_tokens: Optional[Dict[str, Any]] = None) -> None: ...
